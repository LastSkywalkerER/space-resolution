/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace IERC7401 {
  export type ChildStruct = { tokenId: BigNumberish; contractAddress: string };

  export type ChildStructOutput = [BigNumber, string] & {
    tokenId: BigNumber;
    contractAddress: string;
  };
}

export declare namespace IERC6220 {
  export type IntakeEquipStruct = {
    tokenId: BigNumberish;
    childIndex: BigNumberish;
    assetId: BigNumberish;
    slotPartId: BigNumberish;
    childAssetId: BigNumberish;
  };

  export type IntakeEquipStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    tokenId: BigNumber;
    childIndex: BigNumber;
    assetId: BigNumber;
    slotPartId: BigNumber;
    childAssetId: BigNumber;
  };

  export type EquipmentStruct = {
    assetId: BigNumberish;
    childAssetId: BigNumberish;
    childId: BigNumberish;
    childEquippableAddress: string;
  };

  export type EquipmentStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    assetId: BigNumber;
    childAssetId: BigNumber;
    childId: BigNumber;
    childEquippableAddress: string;
  };
}

export interface EtherInterface extends utils.Interface {
  functions: {
    "RMRK_INTERFACE()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "acceptAsset(uint256,uint256,uint64)": FunctionFragment;
    "acceptChild(uint256,uint256,address,uint256)": FunctionFragment;
    "addAssetEntry(string)": FunctionFragment;
    "addAssetToToken(uint256,uint64,uint64)": FunctionFragment;
    "addChild(uint256,uint256,bytes)": FunctionFragment;
    "addEquippableAssetEntry(uint64,address,string,uint64[])": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "approveForAssets(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "burn(uint256,uint256)": FunctionFragment;
    "canTokenBeEquippedWithAssetIntoSlot(address,uint256,uint64,uint64)": FunctionFragment;
    "childOf(uint256,uint256)": FunctionFragment;
    "childrenOf(uint256)": FunctionFragment;
    "collectionMetadata()": FunctionFragment;
    "directOwnerOf(uint256)": FunctionFragment;
    "equip((uint256,uint256,uint64,uint64,uint64))": FunctionFragment;
    "getActiveAssetPriorities(uint256)": FunctionFragment;
    "getActiveAssets(uint256)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getApprovedForAssets(uint256)": FunctionFragment;
    "getAssetAndEquippableData(uint256,uint64)": FunctionFragment;
    "getAssetMetadata(uint256,uint64)": FunctionFragment;
    "getAssetReplacements(uint256,uint64)": FunctionFragment;
    "getEquipment(uint256,address,uint64)": FunctionFragment;
    "getPendingAssets(uint256)": FunctionFragment;
    "getRoyaltyPercentage()": FunctionFragment;
    "getRoyaltyRecipient()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isApprovedForAllForAssets(address,address)": FunctionFragment;
    "isChildEquipped(uint256,address,uint256)": FunctionFragment;
    "isContributor(address)": FunctionFragment;
    "manageContributor(address,bool)": FunctionFragment;
    "maxSupply()": FunctionFragment;
    "mint(address,uint256,string)": FunctionFragment;
    "name()": FunctionFragment;
    "nestMint(address,uint256,uint256,string)": FunctionFragment;
    "nestTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onHit()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "pendingChildOf(uint256,uint256)": FunctionFragment;
    "pendingChildrenOf(uint256)": FunctionFragment;
    "rejectAllAssets(uint256,uint256)": FunctionFragment;
    "rejectAllChildren(uint256,uint256)": FunctionFragment;
    "rejectAsset(uint256,uint256,uint64)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "royaltyInfo(uint256,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setApprovalForAllForAssets(address,bool)": FunctionFragment;
    "setPriority(uint256,uint64[])": FunctionFragment;
    "setTokenURI(uint256,string)": FunctionFragment;
    "setValidParentForEquippableGroup(uint64,address,uint64)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalAssets()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferChild(uint256,address,uint256,uint256,address,uint256,bool,bytes)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unequip(uint256,uint64,uint64)": FunctionFragment;
    "updateRoyaltyRecipient(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "RMRK_INTERFACE"
      | "VERSION"
      | "acceptAsset"
      | "acceptChild"
      | "addAssetEntry"
      | "addAssetToToken"
      | "addChild"
      | "addEquippableAssetEntry"
      | "approve"
      | "approveForAssets"
      | "balanceOf"
      | "burn(uint256)"
      | "burn(uint256,uint256)"
      | "canTokenBeEquippedWithAssetIntoSlot"
      | "childOf"
      | "childrenOf"
      | "collectionMetadata"
      | "directOwnerOf"
      | "equip"
      | "getActiveAssetPriorities"
      | "getActiveAssets"
      | "getApproved"
      | "getApprovedForAssets"
      | "getAssetAndEquippableData"
      | "getAssetMetadata"
      | "getAssetReplacements"
      | "getEquipment"
      | "getPendingAssets"
      | "getRoyaltyPercentage"
      | "getRoyaltyRecipient"
      | "isApprovedForAll"
      | "isApprovedForAllForAssets"
      | "isChildEquipped"
      | "isContributor"
      | "manageContributor"
      | "maxSupply"
      | "mint"
      | "name"
      | "nestMint"
      | "nestTransferFrom"
      | "onHit"
      | "owner"
      | "ownerOf"
      | "pendingChildOf"
      | "pendingChildrenOf"
      | "rejectAllAssets"
      | "rejectAllChildren"
      | "rejectAsset"
      | "renounceOwnership"
      | "royaltyInfo"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setApprovalForAllForAssets"
      | "setPriority"
      | "setTokenURI"
      | "setValidParentForEquippableGroup"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "totalAssets"
      | "totalSupply"
      | "transferChild"
      | "transferFrom"
      | "transferOwnership"
      | "unequip"
      | "updateRoyaltyRecipient"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "RMRK_INTERFACE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptAsset",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptChild",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addAssetEntry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addAssetToToken",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addChild",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addEquippableAssetEntry",
    values: [BigNumberish, string, string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveForAssets",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "burn(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burn(uint256,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canTokenBeEquippedWithAssetIntoSlot",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "childOf",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "childrenOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectionMetadata",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "directOwnerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "equip",
    values: [IERC6220.IntakeEquipStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveAssetPriorities",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApprovedForAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetAndEquippableData",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetMetadata",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetReplacements",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEquipment",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyaltyPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyaltyRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAllForAssets",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isChildEquipped",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isContributor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "manageContributor",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "maxSupply", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nestMint",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "nestTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "onHit", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingChildOf",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingChildrenOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectAllAssets",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectAllChildren",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectAsset",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAllForAssets",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriority",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidParentForEquippableGroup",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferChild",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      boolean,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unequip",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRoyaltyRecipient",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "RMRK_INTERFACE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptChild",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAssetEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAssetToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addChild", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addEquippableAssetEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveForAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burn(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burn(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canTokenBeEquippedWithAssetIntoSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "childOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "childrenOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectionMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "directOwnerOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "equip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActiveAssetPriorities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApprovedForAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetAndEquippableData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetReplacements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEquipment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyaltyPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyaltyRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAllForAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isChildEquipped",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isContributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "manageContributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxSupply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nestMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nestTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "onHit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingChildOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingChildrenOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectAllAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectAllChildren",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAllForAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidParentForEquippableGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferChild",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unequip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateRoyaltyRecipient",
    data: BytesLike
  ): Result;

  events: {
    "AllChildrenRejected(uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "ApprovalForAllForAssets(address,address,bool)": EventFragment;
    "ApprovalForAssets(address,address,uint256)": EventFragment;
    "AssetAccepted(uint256,uint64,uint64)": EventFragment;
    "AssetAddedToTokens(uint256[],uint64,uint64)": EventFragment;
    "AssetPrioritySet(uint256)": EventFragment;
    "AssetRejected(uint256,uint64)": EventFragment;
    "AssetSet(uint64)": EventFragment;
    "ChildAccepted(uint256,uint256,address,uint256)": EventFragment;
    "ChildAssetEquipped(uint256,uint64,uint64,uint256,address,uint64)": EventFragment;
    "ChildAssetUnequipped(uint256,uint64,uint64,uint256,address,uint64)": EventFragment;
    "ChildProposed(uint256,uint256,address,uint256)": EventFragment;
    "ChildTransferred(uint256,uint256,address,uint256,bool,bool)": EventFragment;
    "ContributorUpdate(address,bool)": EventFragment;
    "Hit(address)": EventFragment;
    "NestTransfer(address,address,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "ValidParentEquippableGroupIdSet(uint64,uint64,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllChildrenRejected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAllForAssets"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAssets"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetAddedToTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetPrioritySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetRejected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChildAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChildAssetEquipped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChildAssetUnequipped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChildProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChildTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContributorUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Hit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NestTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ValidParentEquippableGroupIdSet"
  ): EventFragment;
}

export interface AllChildrenRejectedEventObject {
  tokenId: BigNumber;
}
export type AllChildrenRejectedEvent = TypedEvent<
  [BigNumber],
  AllChildrenRejectedEventObject
>;

export type AllChildrenRejectedEventFilter =
  TypedEventFilter<AllChildrenRejectedEvent>;

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface ApprovalForAllForAssetsEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllForAssetsEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllForAssetsEventObject
>;

export type ApprovalForAllForAssetsEventFilter =
  TypedEventFilter<ApprovalForAllForAssetsEvent>;

export interface ApprovalForAssetsEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalForAssetsEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalForAssetsEventObject
>;

export type ApprovalForAssetsEventFilter =
  TypedEventFilter<ApprovalForAssetsEvent>;

export interface AssetAcceptedEventObject {
  tokenId: BigNumber;
  assetId: BigNumber;
  replacesId: BigNumber;
}
export type AssetAcceptedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  AssetAcceptedEventObject
>;

export type AssetAcceptedEventFilter = TypedEventFilter<AssetAcceptedEvent>;

export interface AssetAddedToTokensEventObject {
  tokenIds: BigNumber[];
  assetId: BigNumber;
  replacesId: BigNumber;
}
export type AssetAddedToTokensEvent = TypedEvent<
  [BigNumber[], BigNumber, BigNumber],
  AssetAddedToTokensEventObject
>;

export type AssetAddedToTokensEventFilter =
  TypedEventFilter<AssetAddedToTokensEvent>;

export interface AssetPrioritySetEventObject {
  tokenId: BigNumber;
}
export type AssetPrioritySetEvent = TypedEvent<
  [BigNumber],
  AssetPrioritySetEventObject
>;

export type AssetPrioritySetEventFilter =
  TypedEventFilter<AssetPrioritySetEvent>;

export interface AssetRejectedEventObject {
  tokenId: BigNumber;
  assetId: BigNumber;
}
export type AssetRejectedEvent = TypedEvent<
  [BigNumber, BigNumber],
  AssetRejectedEventObject
>;

export type AssetRejectedEventFilter = TypedEventFilter<AssetRejectedEvent>;

export interface AssetSetEventObject {
  assetId: BigNumber;
}
export type AssetSetEvent = TypedEvent<[BigNumber], AssetSetEventObject>;

export type AssetSetEventFilter = TypedEventFilter<AssetSetEvent>;

export interface ChildAcceptedEventObject {
  tokenId: BigNumber;
  childIndex: BigNumber;
  childAddress: string;
  childId: BigNumber;
}
export type ChildAcceptedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber],
  ChildAcceptedEventObject
>;

export type ChildAcceptedEventFilter = TypedEventFilter<ChildAcceptedEvent>;

export interface ChildAssetEquippedEventObject {
  tokenId: BigNumber;
  assetId: BigNumber;
  slotPartId: BigNumber;
  childId: BigNumber;
  childAddress: string;
  childAssetId: BigNumber;
}
export type ChildAssetEquippedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string, BigNumber],
  ChildAssetEquippedEventObject
>;

export type ChildAssetEquippedEventFilter =
  TypedEventFilter<ChildAssetEquippedEvent>;

export interface ChildAssetUnequippedEventObject {
  tokenId: BigNumber;
  assetId: BigNumber;
  slotPartId: BigNumber;
  childId: BigNumber;
  childAddress: string;
  childAssetId: BigNumber;
}
export type ChildAssetUnequippedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string, BigNumber],
  ChildAssetUnequippedEventObject
>;

export type ChildAssetUnequippedEventFilter =
  TypedEventFilter<ChildAssetUnequippedEvent>;

export interface ChildProposedEventObject {
  tokenId: BigNumber;
  childIndex: BigNumber;
  childAddress: string;
  childId: BigNumber;
}
export type ChildProposedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber],
  ChildProposedEventObject
>;

export type ChildProposedEventFilter = TypedEventFilter<ChildProposedEvent>;

export interface ChildTransferredEventObject {
  tokenId: BigNumber;
  childIndex: BigNumber;
  childAddress: string;
  childId: BigNumber;
  fromPending: boolean;
  toZero: boolean;
}
export type ChildTransferredEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, boolean, boolean],
  ChildTransferredEventObject
>;

export type ChildTransferredEventFilter =
  TypedEventFilter<ChildTransferredEvent>;

export interface ContributorUpdateEventObject {
  contributor: string;
  isContributor: boolean;
}
export type ContributorUpdateEvent = TypedEvent<
  [string, boolean],
  ContributorUpdateEventObject
>;

export type ContributorUpdateEventFilter =
  TypedEventFilter<ContributorUpdateEvent>;

export interface HitEventObject {
  attacking: string;
}
export type HitEvent = TypedEvent<[string], HitEventObject>;

export type HitEventFilter = TypedEventFilter<HitEvent>;

export interface NestTransferEventObject {
  from: string;
  to: string;
  fromTokenId: BigNumber;
  toTokenId: BigNumber;
  tokenId: BigNumber;
}
export type NestTransferEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  NestTransferEventObject
>;

export type NestTransferEventFilter = TypedEventFilter<NestTransferEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface ValidParentEquippableGroupIdSetEventObject {
  equippableGroupId: BigNumber;
  slotPartId: BigNumber;
  parentAddress: string;
}
export type ValidParentEquippableGroupIdSetEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  ValidParentEquippableGroupIdSetEventObject
>;

export type ValidParentEquippableGroupIdSetEventFilter =
  TypedEventFilter<ValidParentEquippableGroupIdSetEvent>;

export interface Ether extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EtherInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    RMRK_INTERFACE(overrides?: CallOverrides): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    acceptAsset(
      tokenId: BigNumberish,
      index: BigNumberish,
      assetId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    acceptChild(
      parentId: BigNumberish,
      childIndex: BigNumberish,
      childAddress: string,
      childId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addAssetEntry(
      metadataURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addAssetToToken(
      tokenId: BigNumberish,
      assetId: BigNumberish,
      replacesAssetWithId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addChild(
      parentId: BigNumberish,
      childId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addEquippableAssetEntry(
      equippableGroupId: BigNumberish,
      catalogAddress: string,
      metadataURI: string,
      partIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    approveForAssets(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "burn(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "burn(uint256,uint256)"(
      tokenId: BigNumberish,
      maxChildrenBurns: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    canTokenBeEquippedWithAssetIntoSlot(
      parent: string,
      tokenId: BigNumberish,
      assetId: BigNumberish,
      slotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    childOf(
      parentId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IERC7401.ChildStructOutput]>;

    childrenOf(
      parentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IERC7401.ChildStructOutput[]]>;

    collectionMetadata(overrides?: CallOverrides): Promise<[string]>;

    directOwnerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, boolean]>;

    equip(
      data: IERC6220.IntakeEquipStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getActiveAssetPriorities(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getActiveAssets(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getApprovedForAssets(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAssetAndEquippableData(
      tokenId: BigNumberish,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string, BigNumber[]]>;

    getAssetMetadata(
      tokenId: BigNumberish,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAssetReplacements(
      tokenId: BigNumberish,
      newAssetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEquipment(
      tokenId: BigNumberish,
      targetCatalogAddress: string,
      slotPartId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IERC6220.EquipmentStructOutput]>;

    getPendingAssets(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getRoyaltyPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoyaltyRecipient(overrides?: CallOverrides): Promise<[string]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isApprovedForAllForAssets(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isChildEquipped(
      tokenId: BigNumberish,
      childAddress: string,
      childId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isContributor(
      contributor: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    manageContributor(
      contributor: string,
      grantRole: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    maxSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      to: string,
      numToMint: BigNumberish,
      tokenURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nestMint(
      to: string,
      numToMint: BigNumberish,
      destinationId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    nestTransferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      destinationId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    onHit(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pendingChildOf(
      parentId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IERC7401.ChildStructOutput]>;

    pendingChildrenOf(
      parentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IERC7401.ChildStructOutput[]]>;

    rejectAllAssets(
      tokenId: BigNumberish,
      maxRejections: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rejectAllChildren(
      tokenId: BigNumberish,
      maxRejections: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rejectAsset(
      tokenId: BigNumberish,
      index: BigNumberish,
      assetId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    royaltyInfo(
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { receiver: string; royaltyAmount: BigNumber }
    >;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setApprovalForAllForAssets(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPriority(
      tokenId: BigNumberish,
      priorities: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setTokenURI(
      tokenId: BigNumberish,
      tokenURI_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setValidParentForEquippableGroup(
      equippableGroupId: BigNumberish,
      parentAddress: string,
      partId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferChild(
      tokenId: BigNumberish,
      to: string,
      destinationId: BigNumberish,
      childIndex: BigNumberish,
      childAddress: string,
      childId: BigNumberish,
      isPending: boolean,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unequip(
      tokenId: BigNumberish,
      assetId: BigNumberish,
      slotPartId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateRoyaltyRecipient(
      newRoyaltyRecipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  RMRK_INTERFACE(overrides?: CallOverrides): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  acceptAsset(
    tokenId: BigNumberish,
    index: BigNumberish,
    assetId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  acceptChild(
    parentId: BigNumberish,
    childIndex: BigNumberish,
    childAddress: string,
    childId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addAssetEntry(
    metadataURI: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addAssetToToken(
    tokenId: BigNumberish,
    assetId: BigNumberish,
    replacesAssetWithId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addChild(
    parentId: BigNumberish,
    childId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addEquippableAssetEntry(
    equippableGroupId: BigNumberish,
    catalogAddress: string,
    metadataURI: string,
    partIds: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  approveForAssets(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "burn(uint256)"(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "burn(uint256,uint256)"(
    tokenId: BigNumberish,
    maxChildrenBurns: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  canTokenBeEquippedWithAssetIntoSlot(
    parent: string,
    tokenId: BigNumberish,
    assetId: BigNumberish,
    slotId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  childOf(
    parentId: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IERC7401.ChildStructOutput>;

  childrenOf(
    parentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IERC7401.ChildStructOutput[]>;

  collectionMetadata(overrides?: CallOverrides): Promise<string>;

  directOwnerOf(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, boolean]>;

  equip(
    data: IERC6220.IntakeEquipStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getActiveAssetPriorities(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getActiveAssets(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getApprovedForAssets(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getAssetAndEquippableData(
    tokenId: BigNumberish,
    assetId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string, BigNumber[]]>;

  getAssetMetadata(
    tokenId: BigNumberish,
    assetId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getAssetReplacements(
    tokenId: BigNumberish,
    newAssetId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEquipment(
    tokenId: BigNumberish,
    targetCatalogAddress: string,
    slotPartId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IERC6220.EquipmentStructOutput>;

  getPendingAssets(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getRoyaltyPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  getRoyaltyRecipient(overrides?: CallOverrides): Promise<string>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isApprovedForAllForAssets(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isChildEquipped(
    tokenId: BigNumberish,
    childAddress: string,
    childId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isContributor(
    contributor: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  manageContributor(
    contributor: string,
    grantRole: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    to: string,
    numToMint: BigNumberish,
    tokenURI: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nestMint(
    to: string,
    numToMint: BigNumberish,
    destinationId: BigNumberish,
    tokenURI: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  nestTransferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    destinationId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  onHit(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  pendingChildOf(
    parentId: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IERC7401.ChildStructOutput>;

  pendingChildrenOf(
    parentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IERC7401.ChildStructOutput[]>;

  rejectAllAssets(
    tokenId: BigNumberish,
    maxRejections: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rejectAllChildren(
    tokenId: BigNumberish,
    maxRejections: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rejectAsset(
    tokenId: BigNumberish,
    index: BigNumberish,
    assetId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  royaltyInfo(
    tokenId: BigNumberish,
    salePrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { receiver: string; royaltyAmount: BigNumber }
  >;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setApprovalForAllForAssets(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPriority(
    tokenId: BigNumberish,
    priorities: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setTokenURI(
    tokenId: BigNumberish,
    tokenURI_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setValidParentForEquippableGroup(
    equippableGroupId: BigNumberish,
    parentAddress: string,
    partId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferChild(
    tokenId: BigNumberish,
    to: string,
    destinationId: BigNumberish,
    childIndex: BigNumberish,
    childAddress: string,
    childId: BigNumberish,
    isPending: boolean,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unequip(
    tokenId: BigNumberish,
    assetId: BigNumberish,
    slotPartId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateRoyaltyRecipient(
    newRoyaltyRecipient: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    RMRK_INTERFACE(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    acceptAsset(
      tokenId: BigNumberish,
      index: BigNumberish,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptChild(
      parentId: BigNumberish,
      childIndex: BigNumberish,
      childAddress: string,
      childId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addAssetEntry(
      metadataURI: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addAssetToToken(
      tokenId: BigNumberish,
      assetId: BigNumberish,
      replacesAssetWithId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addChild(
      parentId: BigNumberish,
      childId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addEquippableAssetEntry(
      equippableGroupId: BigNumberish,
      catalogAddress: string,
      metadataURI: string,
      partIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approveForAssets(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "burn(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "burn(uint256,uint256)"(
      tokenId: BigNumberish,
      maxChildrenBurns: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canTokenBeEquippedWithAssetIntoSlot(
      parent: string,
      tokenId: BigNumberish,
      assetId: BigNumberish,
      slotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    childOf(
      parentId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IERC7401.ChildStructOutput>;

    childrenOf(
      parentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IERC7401.ChildStructOutput[]>;

    collectionMetadata(overrides?: CallOverrides): Promise<string>;

    directOwnerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, boolean]>;

    equip(
      data: IERC6220.IntakeEquipStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getActiveAssetPriorities(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getActiveAssets(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getApprovedForAssets(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getAssetAndEquippableData(
      tokenId: BigNumberish,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string, BigNumber[]]>;

    getAssetMetadata(
      tokenId: BigNumberish,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getAssetReplacements(
      tokenId: BigNumberish,
      newAssetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEquipment(
      tokenId: BigNumberish,
      targetCatalogAddress: string,
      slotPartId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IERC6220.EquipmentStructOutput>;

    getPendingAssets(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getRoyaltyPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    getRoyaltyRecipient(overrides?: CallOverrides): Promise<string>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isApprovedForAllForAssets(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isChildEquipped(
      tokenId: BigNumberish,
      childAddress: string,
      childId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isContributor(
      contributor: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    manageContributor(
      contributor: string,
      grantRole: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      to: string,
      numToMint: BigNumberish,
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nestMint(
      to: string,
      numToMint: BigNumberish,
      destinationId: BigNumberish,
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nestTransferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      destinationId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    onHit(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    pendingChildOf(
      parentId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IERC7401.ChildStructOutput>;

    pendingChildrenOf(
      parentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IERC7401.ChildStructOutput[]>;

    rejectAllAssets(
      tokenId: BigNumberish,
      maxRejections: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rejectAllChildren(
      tokenId: BigNumberish,
      maxRejections: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rejectAsset(
      tokenId: BigNumberish,
      index: BigNumberish,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    royaltyInfo(
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { receiver: string; royaltyAmount: BigNumber }
    >;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAllForAssets(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriority(
      tokenId: BigNumberish,
      priorities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenURI(
      tokenId: BigNumberish,
      tokenURI_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setValidParentForEquippableGroup(
      equippableGroupId: BigNumberish,
      parentAddress: string,
      partId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferChild(
      tokenId: BigNumberish,
      to: string,
      destinationId: BigNumberish,
      childIndex: BigNumberish,
      childAddress: string,
      childId: BigNumberish,
      isPending: boolean,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unequip(
      tokenId: BigNumberish,
      assetId: BigNumberish,
      slotPartId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRoyaltyRecipient(
      newRoyaltyRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AllChildrenRejected(uint256)"(
      tokenId?: BigNumberish | null
    ): AllChildrenRejectedEventFilter;
    AllChildrenRejected(
      tokenId?: BigNumberish | null
    ): AllChildrenRejectedEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "ApprovalForAllForAssets(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllForAssetsEventFilter;
    ApprovalForAllForAssets(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllForAssetsEventFilter;

    "ApprovalForAssets(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalForAssetsEventFilter;
    ApprovalForAssets(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalForAssetsEventFilter;

    "AssetAccepted(uint256,uint64,uint64)"(
      tokenId?: BigNumberish | null,
      assetId?: BigNumberish | null,
      replacesId?: BigNumberish | null
    ): AssetAcceptedEventFilter;
    AssetAccepted(
      tokenId?: BigNumberish | null,
      assetId?: BigNumberish | null,
      replacesId?: BigNumberish | null
    ): AssetAcceptedEventFilter;

    "AssetAddedToTokens(uint256[],uint64,uint64)"(
      tokenIds?: null,
      assetId?: BigNumberish | null,
      replacesId?: BigNumberish | null
    ): AssetAddedToTokensEventFilter;
    AssetAddedToTokens(
      tokenIds?: null,
      assetId?: BigNumberish | null,
      replacesId?: BigNumberish | null
    ): AssetAddedToTokensEventFilter;

    "AssetPrioritySet(uint256)"(
      tokenId?: BigNumberish | null
    ): AssetPrioritySetEventFilter;
    AssetPrioritySet(
      tokenId?: BigNumberish | null
    ): AssetPrioritySetEventFilter;

    "AssetRejected(uint256,uint64)"(
      tokenId?: BigNumberish | null,
      assetId?: BigNumberish | null
    ): AssetRejectedEventFilter;
    AssetRejected(
      tokenId?: BigNumberish | null,
      assetId?: BigNumberish | null
    ): AssetRejectedEventFilter;

    "AssetSet(uint64)"(assetId?: BigNumberish | null): AssetSetEventFilter;
    AssetSet(assetId?: BigNumberish | null): AssetSetEventFilter;

    "ChildAccepted(uint256,uint256,address,uint256)"(
      tokenId?: BigNumberish | null,
      childIndex?: null,
      childAddress?: string | null,
      childId?: BigNumberish | null
    ): ChildAcceptedEventFilter;
    ChildAccepted(
      tokenId?: BigNumberish | null,
      childIndex?: null,
      childAddress?: string | null,
      childId?: BigNumberish | null
    ): ChildAcceptedEventFilter;

    "ChildAssetEquipped(uint256,uint64,uint64,uint256,address,uint64)"(
      tokenId?: BigNumberish | null,
      assetId?: BigNumberish | null,
      slotPartId?: BigNumberish | null,
      childId?: null,
      childAddress?: null,
      childAssetId?: null
    ): ChildAssetEquippedEventFilter;
    ChildAssetEquipped(
      tokenId?: BigNumberish | null,
      assetId?: BigNumberish | null,
      slotPartId?: BigNumberish | null,
      childId?: null,
      childAddress?: null,
      childAssetId?: null
    ): ChildAssetEquippedEventFilter;

    "ChildAssetUnequipped(uint256,uint64,uint64,uint256,address,uint64)"(
      tokenId?: BigNumberish | null,
      assetId?: BigNumberish | null,
      slotPartId?: BigNumberish | null,
      childId?: null,
      childAddress?: null,
      childAssetId?: null
    ): ChildAssetUnequippedEventFilter;
    ChildAssetUnequipped(
      tokenId?: BigNumberish | null,
      assetId?: BigNumberish | null,
      slotPartId?: BigNumberish | null,
      childId?: null,
      childAddress?: null,
      childAssetId?: null
    ): ChildAssetUnequippedEventFilter;

    "ChildProposed(uint256,uint256,address,uint256)"(
      tokenId?: BigNumberish | null,
      childIndex?: null,
      childAddress?: string | null,
      childId?: BigNumberish | null
    ): ChildProposedEventFilter;
    ChildProposed(
      tokenId?: BigNumberish | null,
      childIndex?: null,
      childAddress?: string | null,
      childId?: BigNumberish | null
    ): ChildProposedEventFilter;

    "ChildTransferred(uint256,uint256,address,uint256,bool,bool)"(
      tokenId?: BigNumberish | null,
      childIndex?: null,
      childAddress?: string | null,
      childId?: BigNumberish | null,
      fromPending?: null,
      toZero?: null
    ): ChildTransferredEventFilter;
    ChildTransferred(
      tokenId?: BigNumberish | null,
      childIndex?: null,
      childAddress?: string | null,
      childId?: BigNumberish | null,
      fromPending?: null,
      toZero?: null
    ): ChildTransferredEventFilter;

    "ContributorUpdate(address,bool)"(
      contributor?: string | null,
      isContributor?: null
    ): ContributorUpdateEventFilter;
    ContributorUpdate(
      contributor?: string | null,
      isContributor?: null
    ): ContributorUpdateEventFilter;

    "Hit(address)"(attacking?: null): HitEventFilter;
    Hit(attacking?: null): HitEventFilter;

    "NestTransfer(address,address,uint256,uint256,uint256)"(
      from?: string | null,
      to?: string | null,
      fromTokenId?: null,
      toTokenId?: null,
      tokenId?: BigNumberish | null
    ): NestTransferEventFilter;
    NestTransfer(
      from?: string | null,
      to?: string | null,
      fromTokenId?: null,
      toTokenId?: null,
      tokenId?: BigNumberish | null
    ): NestTransferEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;

    "ValidParentEquippableGroupIdSet(uint64,uint64,address)"(
      equippableGroupId?: BigNumberish | null,
      slotPartId?: BigNumberish | null,
      parentAddress?: null
    ): ValidParentEquippableGroupIdSetEventFilter;
    ValidParentEquippableGroupIdSet(
      equippableGroupId?: BigNumberish | null,
      slotPartId?: BigNumberish | null,
      parentAddress?: null
    ): ValidParentEquippableGroupIdSetEventFilter;
  };

  estimateGas: {
    RMRK_INTERFACE(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    acceptAsset(
      tokenId: BigNumberish,
      index: BigNumberish,
      assetId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    acceptChild(
      parentId: BigNumberish,
      childIndex: BigNumberish,
      childAddress: string,
      childId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addAssetEntry(
      metadataURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addAssetToToken(
      tokenId: BigNumberish,
      assetId: BigNumberish,
      replacesAssetWithId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addChild(
      parentId: BigNumberish,
      childId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addEquippableAssetEntry(
      equippableGroupId: BigNumberish,
      catalogAddress: string,
      metadataURI: string,
      partIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    approveForAssets(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "burn(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "burn(uint256,uint256)"(
      tokenId: BigNumberish,
      maxChildrenBurns: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    canTokenBeEquippedWithAssetIntoSlot(
      parent: string,
      tokenId: BigNumberish,
      assetId: BigNumberish,
      slotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    childOf(
      parentId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    childrenOf(
      parentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectionMetadata(overrides?: CallOverrides): Promise<BigNumber>;

    directOwnerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    equip(
      data: IERC6220.IntakeEquipStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getActiveAssetPriorities(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveAssets(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApprovedForAssets(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssetAndEquippableData(
      tokenId: BigNumberish,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssetMetadata(
      tokenId: BigNumberish,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssetReplacements(
      tokenId: BigNumberish,
      newAssetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEquipment(
      tokenId: BigNumberish,
      targetCatalogAddress: string,
      slotPartId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingAssets(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoyaltyPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    getRoyaltyRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAllForAssets(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isChildEquipped(
      tokenId: BigNumberish,
      childAddress: string,
      childId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isContributor(
      contributor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    manageContributor(
      contributor: string,
      grantRole: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      to: string,
      numToMint: BigNumberish,
      tokenURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nestMint(
      to: string,
      numToMint: BigNumberish,
      destinationId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    nestTransferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      destinationId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    onHit(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingChildOf(
      parentId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingChildrenOf(
      parentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rejectAllAssets(
      tokenId: BigNumberish,
      maxRejections: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rejectAllChildren(
      tokenId: BigNumberish,
      maxRejections: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rejectAsset(
      tokenId: BigNumberish,
      index: BigNumberish,
      assetId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    royaltyInfo(
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setApprovalForAllForAssets(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPriority(
      tokenId: BigNumberish,
      priorities: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setTokenURI(
      tokenId: BigNumberish,
      tokenURI_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setValidParentForEquippableGroup(
      equippableGroupId: BigNumberish,
      parentAddress: string,
      partId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferChild(
      tokenId: BigNumberish,
      to: string,
      destinationId: BigNumberish,
      childIndex: BigNumberish,
      childAddress: string,
      childId: BigNumberish,
      isPending: boolean,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unequip(
      tokenId: BigNumberish,
      assetId: BigNumberish,
      slotPartId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateRoyaltyRecipient(
      newRoyaltyRecipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    RMRK_INTERFACE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptAsset(
      tokenId: BigNumberish,
      index: BigNumberish,
      assetId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    acceptChild(
      parentId: BigNumberish,
      childIndex: BigNumberish,
      childAddress: string,
      childId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addAssetEntry(
      metadataURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addAssetToToken(
      tokenId: BigNumberish,
      assetId: BigNumberish,
      replacesAssetWithId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addChild(
      parentId: BigNumberish,
      childId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addEquippableAssetEntry(
      equippableGroupId: BigNumberish,
      catalogAddress: string,
      metadataURI: string,
      partIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    approveForAssets(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "burn(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "burn(uint256,uint256)"(
      tokenId: BigNumberish,
      maxChildrenBurns: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    canTokenBeEquippedWithAssetIntoSlot(
      parent: string,
      tokenId: BigNumberish,
      assetId: BigNumberish,
      slotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    childOf(
      parentId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    childrenOf(
      parentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectionMetadata(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    directOwnerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    equip(
      data: IERC6220.IntakeEquipStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getActiveAssetPriorities(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActiveAssets(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApprovedForAssets(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetAndEquippableData(
      tokenId: BigNumberish,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetMetadata(
      tokenId: BigNumberish,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetReplacements(
      tokenId: BigNumberish,
      newAssetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEquipment(
      tokenId: BigNumberish,
      targetCatalogAddress: string,
      slotPartId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingAssets(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoyaltyPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoyaltyRecipient(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAllForAssets(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isChildEquipped(
      tokenId: BigNumberish,
      childAddress: string,
      childId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isContributor(
      contributor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    manageContributor(
      contributor: string,
      grantRole: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    maxSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      to: string,
      numToMint: BigNumberish,
      tokenURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nestMint(
      to: string,
      numToMint: BigNumberish,
      destinationId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    nestTransferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      destinationId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    onHit(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingChildOf(
      parentId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingChildrenOf(
      parentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rejectAllAssets(
      tokenId: BigNumberish,
      maxRejections: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rejectAllChildren(
      tokenId: BigNumberish,
      maxRejections: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rejectAsset(
      tokenId: BigNumberish,
      index: BigNumberish,
      assetId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    royaltyInfo(
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setApprovalForAllForAssets(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPriority(
      tokenId: BigNumberish,
      priorities: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setTokenURI(
      tokenId: BigNumberish,
      tokenURI_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setValidParentForEquippableGroup(
      equippableGroupId: BigNumberish,
      parentAddress: string,
      partId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferChild(
      tokenId: BigNumberish,
      to: string,
      destinationId: BigNumberish,
      childIndex: BigNumberish,
      childAddress: string,
      childId: BigNumberish,
      isPending: boolean,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unequip(
      tokenId: BigNumberish,
      assetId: BigNumberish,
      slotPartId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateRoyaltyRecipient(
      newRoyaltyRecipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
