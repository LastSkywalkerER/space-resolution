/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
    TypedEventFilter,
    TypedEvent,
    TypedListener,
    OnEvent,
} from "../common";

export type PositionStruct = {
    x: BigNumberish;
    y: BigNumberish;
    z: BigNumberish;
};

export type PositionStructOutput = [BigNumber, BigNumber, BigNumber] & {
    x: BigNumber;
    y: BigNumber;
    z: BigNumber;
};

export type PlayerStatsResponseStruct = {
    bullets: BigNumberish;
    currentPosition: PositionStruct;
    ethersAmount: BigNumberish;
    ethersPosition: PositionStruct[];
    ethersId: BigNumberish[];
    wreckedEthers: BigNumberish;
};

export type PlayerStatsResponseStructOutput = [
    BigNumber,
    PositionStructOutput,
    BigNumber,
    PositionStructOutput[],
    BigNumber[],
    BigNumber
] & {
    bullets: BigNumber;
    currentPosition: PositionStructOutput;
    ethersAmount: BigNumber;
    ethersPosition: PositionStructOutput[];
    ethersId: BigNumber[];
    wreckedEthers: BigNumber;
};

export interface GameLogicInterface extends utils.Interface {
    functions: {
        "buyBullets(uint256)": FunctionFragment;
        "getGameData()": FunctionFragment;
        "registerAction(uint256[],uint256,(int256,int256,int256))": FunctionFragment;
        "start((int256,int256,int256)[])": FunctionFragment;
    };

    getFunction(
        nameOrSignatureOrTopic:
            | "buyBullets"
            | "getGameData"
            | "registerAction"
            | "start"
    ): FunctionFragment;

    encodeFunctionData(
        functionFragment: "buyBullets",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "getGameData",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "registerAction",
        values: [BigNumberish[], BigNumberish, PositionStruct]
    ): string;
    encodeFunctionData(
        functionFragment: "start",
        values: [PositionStruct[]]
    ): string;

    decodeFunctionResult(functionFragment: "buyBullets", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "getGameData",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "registerAction",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;

    events: {};
}

export interface GameLogic extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: GameLogicInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        buyBullets(
            amount_: BigNumberish,
            overrides?: PayableOverrides & { from?: string }
        ): Promise<ContractTransaction>;

        getGameData(
            overrides?: CallOverrides
        ): Promise<[PlayerStatsResponseStructOutput]>;

        registerAction(
            etherIds_: BigNumberish[],
            bulletsAmount_: BigNumberish,
            newPlayerPosition_: PositionStruct,
            overrides?: Overrides & { from?: string }
        ): Promise<ContractTransaction>;

        start(
            ethersPosition_: PositionStruct[],
            overrides?: Overrides & { from?: string }
        ): Promise<ContractTransaction>;
    };

    buyBullets(
        amount_: BigNumberish,
        overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    getGameData(
        overrides?: CallOverrides
    ): Promise<PlayerStatsResponseStructOutput>;

    registerAction(
        etherIds_: BigNumberish[],
        bulletsAmount_: BigNumberish,
        newPlayerPosition_: PositionStruct,
        overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    start(
        ethersPosition_: PositionStruct[],
        overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    callStatic: {
        buyBullets(amount_: BigNumberish, overrides?: CallOverrides): Promise<void>;

        getGameData(
            overrides?: CallOverrides
        ): Promise<PlayerStatsResponseStructOutput>;

        registerAction(
            etherIds_: BigNumberish[],
            bulletsAmount_: BigNumberish,
            newPlayerPosition_: PositionStruct,
            overrides?: CallOverrides
        ): Promise<void>;

        start(
            ethersPosition_: PositionStruct[],
            overrides?: CallOverrides
        ): Promise<void>;
    };

    filters: {};

    estimateGas: {
        buyBullets(
            amount_: BigNumberish,
            overrides?: PayableOverrides & { from?: string }
        ): Promise<BigNumber>;

        getGameData(overrides?: CallOverrides): Promise<BigNumber>;

        registerAction(
            etherIds_: BigNumberish[],
            bulletsAmount_: BigNumberish,
            newPlayerPosition_: PositionStruct,
            overrides?: Overrides & { from?: string }
        ): Promise<BigNumber>;

        start(
            ethersPosition_: PositionStruct[],
            overrides?: Overrides & { from?: string }
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        buyBullets(
            amount_: BigNumberish,
            overrides?: PayableOverrides & { from?: string }
        ): Promise<PopulatedTransaction>;

        getGameData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        registerAction(
            etherIds_: BigNumberish[],
            bulletsAmount_: BigNumberish,
            newPlayerPosition_: PositionStruct,
            overrides?: Overrides & { from?: string }
        ): Promise<PopulatedTransaction>;

        start(
            ethersPosition_: PositionStruct[],
            overrides?: Overrides & { from?: string }
        ): Promise<PopulatedTransaction>;
    };
}
